syntax = "proto3";

package protos.grpc;

import "src/protos/chunk_server.proto";

service ChunkServerFileService {
  // Create an empty file chunk with |chunk_handle| at the chunk server.
  // The chunk server returns error if |chunk_handle| already exists; 
  // otherwise a new file chunk with version 1 is initialized.
  // This request is only sent by the master to the chunk server
  rpc InitFileChunk(InitFileChunkRequest) returns (InitFileChunkReply) {}

  // Read |chunk_handle| of known version |chunk_version| at |offset_start|
  // for |length| number of bytes. Return the data and the actual number of 
  // bytes read, if the operation is successful; otherwise, return any error.
  //
  // The actual number of bytes read may be smaller than the number of bytes 
  // requested, if EOF has reached: |offset_start| + |length| > chunk size.
  // If |offset_start| is larger than the chunk size, no bytes will be read
  rpc ReadFileChunk(ReadFileChunkRequest) returns (ReadFileChunkReply) {}

  // Advance the |chunk_version| of the specified |chunk_handle| by one on the
  // receiving chunk server. This request is only sent by the master to all the
  // chunk servers that hold the most up-to-date replica for the |chunk_handle|,
  // *before* it grants a *new* lease for a write operation. 
  rpc AdvanceFileChunkVersion(AdvanceFileChunkVersionRequest) 
    returns (AdvanceFileChunkVersionReply) {}

  // BEFORE a write, the client pushes the data, identifiable by |checksum|, to 
  // all the replicas. A client can do so in any order. Each chunk server will 
  // store the data in an internal cache until the data is used or aged out. 
  // The chunk server doesn't care where this data will be written to in future,
  // and finds out only from "ApplyMutations" gRPC sent by the primary replica.
  //
  // This design from GFS also makes writing redundant data to different chunks
  // easy, by sending the data only once.
  //
  // Alternatively, a client can push it the closest replica and let the network
  // forward the data to other replicas; however, we wont implement this for now
  rpc SendChunkData(SendChunkDataRequest) returns (SendChunkDataReply) {}

  // Write |length| number of bytes to |chunk_handle| of known version 
  // |chunk_version| at |offset_start|, using data previously sent by client, 
  // which is identified by the |checksum|. Return the actual number of bytes 
  // written (to memory), if the operation is successful; otherwise, any errors.
  //
  // The chunk server will expect that the client has already sent the |data|
  // to all the secondary replicas; otherwise, the write operation will fail.
  //
  // For concurrent writes, chunk server will determine the serialization order.
  // It guarantees the consistency of data across all replica, but the data
  // is undefined if concurrent writes happened successfully. For overlapping 
  // regions between concurrent writes, either one of the write, or a mixture of
  // the write data is applied (GFS paper Table 1). If the client wants data 
  // consistency and defined behavior, it should use external lock services.
  //
  // The actual number of bytes written can be smaller than requested |length|,
  // if either EOF has reached, or the given |data| buffer is shorter than 
  // specified |length|. If |length| is smaller than the whole |data| buffer
  // length, only the first |length| bytes of the |data| buffer will be written.
  // If |offset_start| is larger than the chunk size, no bytes will be written
  //
  // This RPC is sent by a client to the primary chunk server AFTER the client
  // acknowledges the receipt of data from all replicas. Upon receipt of this
  // write request, the primary chunk server assigns consecutive serial numbers 
  // to all the write mutations it receives, possibly from multiple clients, 
  // which provides the necessary serialization. It applies the mutation to its 
  // own local state in serial number order, and then forwards the write request
  // to all secondary replicas using "ApplyMutations" gRPC. 
  //
  // Each secondary replica applies mutations in the same serial number order 
  // assigned by the primary. The secondaries all reply to the primary 
  // indicating that they have completed the operation, before the primary 
  // replies to the client.
  rpc WriteFileChunk(WriteFileChunkRequest) returns (WriteFileChunkReply) {}

  // The primary chunk server bundles the write mutations and gives a 
  // serialization order. After the primary applies the mutations locally, it
  // forwards these ordered mutations to secondary replicas via this gRPC.
  rpc ApplyMutations(ApplyMutationsRequest) returns (ApplyMutationsReply) {}

  // TODO(tugan): add support for the master to ask chunk server to copy file
  // from other chunk servers for min file replica count maintenance

  // TODO(tugan): add support for snapshot and append operations
}

message InitFileChunkRequest {
  // An immutable and globally unique UUID chunk identifier.
  string chunk_handle = 1;
}

message InitFileChunkReply {
  // The original request associated with this reply.
  InitFileChunkRequest request = 1;
  // The status of file chunk creation operation
  enum InitFileChunkStatus {
    UNKNOWN = 0;
    CREATED = 1;
    ALREADY_EXISTS = 2;
  }
  InitFileChunkStatus status = 2;
}

message ReadFileChunkRequest {
  // An immutable and globally unique UUID chunk identifier.
  string chunk_handle = 1;
  // The version of the file chunk that the requester is trying to read
  // If the chunk server has a stale version compared to what was requested,
  // chunk server will return an error, and ask the client to send the request
  // to another chunk server that has the most up-to-date version.
  uint32 chunk_version = 2;
  // The starting offset at which to start reading data from
  uint32 offset_start = 3;
  // The number of bytes to read
  uint32 length = 4;
}

message ReadFileChunkReply {
  // The original request associated with this reply.
  ReadFileChunkRequest request = 1;
  // The status of file chunk read operation
  enum ReadFileChunkStatus {
    UNKNOWN = 0;
    OK = 1;
    FAILED_NOT_FOUND = 2;
    FAILED_VERSION_OUT_OF_SYNC = 3;
    FAILED_OUT_OF_RANGE = 4;
  }
  ReadFileChunkStatus status = 2;
  // The read data, if operation is successful
  bytes data = 3;
  // The number of bytes that was actually read
  uint32 bytes_read = 4;
}

message AdvanceFileChunkVersionRequest {
  // An immutable and globally unique UUID chunk identifier.
  string chunk_handle = 1;
  // The expected chunk version after version advance.
  uint32 new_chunk_version = 2;
}

message AdvanceFileChunkVersionReply {
  // The original request associated with this reply.
  AdvanceFileChunkVersionRequest request = 1;
  // The status of file chunk version update operation
  enum AdvanceFileChunkVersionStatus {
    UNKNOWN = 0;
    OK = 1;
    FAILED_NOT_FOUND = 2;
    FAILED_VERSION_OUT_OF_SYNC = 3;
  }
  AdvanceFileChunkVersionStatus status = 2;
  // The chunk version on the chunk server after the reply
  // If reply status is OK, this should match the `new_chunk_version`
  // sent by the request. If reply status is failure, no version has
  // been advanced on the chunk server, and this is the existing version
  // for the requested chunk handle on the chunk server. This helps
  // master to become aware of either itself or chunk server is out of sync
  uint32 chunk_version = 3;
}

message SendChunkDataRequest {
  // The data that the client wants the chunk server to store
  bytes data = 1;
  // The checksum for uniquely identifying this data across requests, so
  // future requests don't need to resend the data, unless the data expired.
  bytes checksum = 2;
}

message SendChunkDataReply {
  // The original request associated with this reply.
  SendChunkDataRequest request = 1;
  enum SendChunkDataRequestStatus {
    UNKNOWN = 0;
    OK = 1;
    RATE_LIMITED = 2; // not used, but as an example of what we can have
    DATA_TOO_BIG = 3; // data is bigger than allowed GFS file chunk block size
    BAD_DATA = 4; // checksum for data sent doesn't match the calculated checksum
    FAILED = 5;
  }
  SendChunkDataRequestStatus status = 2;
}

message WriteFileChunkRequestHeader {
  // An immutable and globally unique UUID chunk identifier.
  string chunk_handle = 1;
  // The version of the file chunk that the requester is trying to write
  uint32 chunk_version = 2;
  // The starting offset at which to start writing data to
  uint32 offset_start = 3;
  // The number of bytes to write
  uint32 length = 4;
  // The checksum for uniquely identifying the data previously sent to all 
  // replicas already via SendChunkData gRPC.
  bytes data_checksum = 5;
}

message ApplyMutationsRequest {
  // Serialized/ordered concurrent write mutations to apply
  repeated WriteFileChunkRequestHeader headers = 1;
}

enum FileChunkMutationStatus {
  UNKNOWN = 0;
  OK = 1;
  // Data with given |data_checksum| either doesn't exist, or has expired,
  // in the data cache; client needs to resend the data using SendDataRequest
  FAILED_DATA_NOT_FOUND = 2;
  // No given chunk handle is found.
  FAILED_CHUNK_NOT_FOUND = 3;
  // Failed to apply mutation because replica has a stale chunk
  FAILED_STALE_VERSION = 4;
  // This only applies if a client tries to send a WriteRequest to a secondary
  // replica; it'll not error when ApplyMutationRequests are sent by the primary
  FAILED_NOT_LEASE_HOLDER = 5;
  // Failed because the write start offset is outside the allowed range
  FAILED_OUT_OF_RANGE = 6;
}


message ApplyMutationsReply {
  // The original request associated with this reply.
  ApplyMutationsRequest request = 1;
  // The status of applying all mutations
  FileChunkMutationStatus status = 2;
}

message WriteFileChunkRequest {
  // The write header for this write request
  WriteFileChunkRequestHeader header = 1;
  // The replicas that the client has already sent the data to, so the primary
  // chunk server knows who to forward the serialized concurrent writes to.
  repeated protos.ChunkServerLocation replica_locations = 2;
}

message WriteFileChunkReply {
  // The original request associated with this reply.
  WriteFileChunkRequest request = 1;
  // The number of bytes that was actually written
  uint32 bytes_written = 2;
  // The final status of the write
  FileChunkMutationStatus status = 3;
  // The specific statuses returned from all replicas
  // If the write fails at the primary before the write request is forwarded
  // toe the clients, this field will be empty.
  message ReplicaStatus {
    protos.ChunkServerLocation chunk_server_location = 1;
    FileChunkMutationStatus status = 2;
  }
  repeated ReplicaStatus replica_status = 4;
}
