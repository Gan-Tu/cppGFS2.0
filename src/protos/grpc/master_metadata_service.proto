syntax = "proto3";

package protos.grpc;

import "google/protobuf/empty.proto";
import "src/protos/metadata.proto";

service MasterMetadataService {
  // Return the chunk handle, version, and associated replica locations
  // for a given |filename| at |chunk_index|. 
  //
  // For |APPEND| mode, |chunk_index| is not required, ignored if specified, 
  // because the master will decide which chunk handle the client should write 
  // to for the append operation; if no concurrent append exists, this is 
  // guaranteed to be the chunk handle for the last chunk index.
  //
  // If either |filename| or |chunk_index| doesn't exist, an error status with 
  // empty reply is returned if |create_if_not_exists| is false; otherwise, the
  // master will create the chunk, and initialize its creation on all chunk 
  // servers, before returning to client. If chunk creation fails, the open
  // operation is considered to have failed.
  //
  // The master does not enforce or guarantee a |filename| will always have
  // continuous |chunk_index|. Fragmentation and missing intermediate chunks may 
  // exist if client forgets, or fails, to create an intermediate |chunk_index|.
  // In this case, it is up to the client to retry, when applicable.
  rpc OpenFile(OpenFileRequest) returns (OpenFileReply) {}

  // Delete |filename|. This effectively deletes all associated file chunks.
  // If |filename| doesn't exist yet, an error status is returned.
  rpc DeleteFile(DeleteFileRequest) returns (google.protobuf.Empty) {}

  // TODO(tugan): add gRPC calls for snapshot operations
}

message OpenFileRequest {
  // Absolute file name or directory name
  string filename = 1;
  // A chunk index is |byte_range / chunk block size|.
  // By default, the block size of a chunk is 64MB.
  // This is not required, and ignored, for |APPEND| mode.
  uint32 chunk_index = 2;
  // Open modes
  enum OpenMode {
    READ = 0;
    WRITE = 1;
    APPEND = 2;
  }
  OpenMode mode = 3;
  // Create the file chunk, if it doesn't exist
  bool create_if_not_exists = 4;
}

message OpenFileReply {
  // The original request associated with this reply.
  OpenFileRequest request = 1;
  // Most update-to-date chunk version known to master for this file chunk.
  // The client, or another chunkserver, should always verify the chunk version
  // number before performing file operations at any chunk location, so that it
  // can always read/write the most up-to-date data.
  //
  // For newly created file chunks, chunk version is always 1.
  uint32 chunk_version = 2;
  // The metadata for the requested file chunk.
  protos.FileChunkMetadata metadata = 3;
  // If open request is for file mutation (i.e. write and append mode), this is
  // the chunkserver location for the primary replica; otherwise, it is NULL.
  //
  // Client should send write requests to the primary chunkserver, so it can
  // determine the serialization order of all mutations applied to the chunk,
  // and forward the mutation order to all secondary replicas; The client
  // should check with master again, if the primary no longer holds a lease for
  // write mutations. (Ref: GFS paper section 3.1)
  protos.ChunkServerLocation primary_location = 4;
}

message DeleteFileRequest {
  // Absolute file name or directory name
  string filename = 1;
}
